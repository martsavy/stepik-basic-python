eng_lower_alphabet = 'abcdefghijklmnopqrstuvwxyz'
eng_upper_alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
rus_lower_alphabet = "–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
rus_upper_alphabet = "–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
alphabets = eng_lower_alphabet + eng_upper_alphabet + rus_lower_alphabet + rus_upper_alphabet

def encrypt(char, key, cardo, alphabet):
    # –∑–∞—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–∏–º–≤–æ–ª–∞-–∞—Ä–≥—É–º–µ–Ω—Ç–∞. –í–æ–∑–≤—Ä–∞—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    return alphabet[((alphabet.find(char) + key) % cardo)]
def decrypt(char, key, cardo, alphabet):
    # –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–∏–º–≤–æ–ª–∞-–∞—Ä–≥—É–º–µ–Ω—Ç–∞. –í–æ–∑–≤—Ä–∞—Ç –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    return alphabet[((alphabet.find(char) - key) % cardo)]

def get_lang(): 
    # –≤–≤–æ–¥ —è–∑—ã–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å en –∏–ª–∏ ru)
    lang = input("–Ø–∑—ã–∫ –∞–ª—Ñ–∞–≤–∏—Ç–∞ —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π? [ru/en]")
    while True:
        if lang == 'ru' or lang == 'en':
            return lang
        else:
            lang = input("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 'ru' –∏–ª–∏ 'en':")

def get_direction():
    # –≤–≤–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—à–∏—Ñ—Ä–æ–≤–∫–∞/–¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∞) –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å e –∏–ª–∏ d)
    direction = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ; [encrypt=e/decrypt=d]")
    while True:
        if direction == 'e' or direction == 'd':
            return direction
        else:
            direction = input("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 'e' –∏–ª–∏ 'd':")

def get_key():
    # –≤–≤–æ–¥ —Å–¥–≤–∏–≥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
    key = input("–í–≤–µ–¥–∏—Ç–µ —à–∞–≥ —Å–¥–≤–∏–≥–∞ (—Å–æ —Å–¥–≤–∏–≥–æ–º –≤–ø—Ä–∞–≤–æ):")
    while True:
        if key.isdigit:
            return int(key)
        else:
            key = input("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")

def process(s, direction, lang, key):
    # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞
    if lang == 'ru':
        cardo = 32
    else:
        cardo = 26
    res = ''
    for c in s:
        if direction == 'e':
            if c in rus_lower_alphabet:
                res += encrypt(c, key, cardo, rus_lower_alphabet)
            elif c in rus_upper_alphabet:
                res += encrypt(c, key, cardo, rus_upper_alphabet)
            elif c in eng_lower_alphabet:
                res += encrypt(c, key, cardo, eng_lower_alphabet)
            elif c in eng_upper_alphabet:
                res += encrypt(c, key, cardo, eng_upper_alphabet)
            else:
                res += c
        if direction == 'd':
            if c in rus_lower_alphabet:
                res += decrypt(c, key, cardo, rus_lower_alphabet)
            elif c in rus_upper_alphabet:
                res += decrypt(c, key, cardo, rus_upper_alphabet)
            elif c in eng_lower_alphabet:
                res += decrypt(c, key, cardo, eng_lower_alphabet)
            elif c in eng_upper_alphabet:
                res += decrypt(c, key, cardo, eng_upper_alphabet)
            else:
                res += c
    return res

def calc_key(s):
    # –æ–±—Ä–∞–∑–∞–µ–º –ª—é–±—ã–µ –Ω–µ-–±—É–∫–≤—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ —Å–ª–æ–≤–∞
    while not (s[0] in eng_lower_alphabet or s[0] in eng_upper_alphabet):
        s = s[1:]
    while not (s[-1] in eng_lower_alphabet or s[-1] in eng_upper_alphabet):
        s = s[:-1]
    return len(s)

def decode():
    s = input('–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:')
    lang = 'en'
    direction = 'e'
    for i in range(25):
        print(process(s, direction, lang, i))
    return 0

def ave_cesar():
    """ 
    –ê–≤–µ, –¶–µ–∑–∞—Ä—å üå∂Ô∏è
    –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞. 
    –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å—Ç—Ä–æ–∫–∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è (—Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–¥–≤–∏–≥–∞ –Ω–∞ –¥–ª–∏–Ω—É —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞). 
    –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞—é—Ç—Å—è —Å—Ç—Ä–æ—á–Ω—ã–º–∏, –∞ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ ‚Äì –ø—Ä–æ–ø–∏—Å–Ω—ã–º–∏.

    –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö 
    –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.

    –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.

    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–∏–º–≤–æ–ª—ã, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏, –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è.

    Sample Input 1:
    Day, mice. "Year" is a mistake!
    Sample Output 1:
    Gdb, qmgi. "Ciev" ku b tpzahrl!
    Sample Input 2:
    my name is Python!
    Sample Output 2:
    oa reqi ku Veznut! """

    lang = 'en'
    direction = 'e'
    s = 'Day, mice. "Year" is a mistake!'

    for word in s.split():
        print(process(word, direction, lang, calc_key(word)), end=' ')
    return 0

# main
lang = get_lang()
direction = get_direction()
key = get_key()
s = input('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:')

print(process(s, direction, lang, key))