""" –ó–≤–µ–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é draw_triangle(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–≤–µ–∑–¥–Ω—ã–π —Ä–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏ –≤—ã—Å–æ—Ç–æ–π —Ä–∞–≤–Ω—ã–º–∏ 1515 –∏ 88 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ:

       *
      ***
     *****
    *******
   *********
  ***********
 *************
***************
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1 . –î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª for. 

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2 . –°–ø—Ä–∞–≤–∞ –æ—Ç –∑–≤–µ–∑–¥–æ—á–µ–∫ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–µ—Ç. """

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def draw_triangle():
    j = 1
    for i in range(1, 9):
        print(' ' * (8 - i), '*' * j, sep = '')
        j += 2

# –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
draw_triangle()  # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏

""" –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —ç–∫—Å–ø—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —Å–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ 10001000 —Ä—É–±–ª–µ–π –∑–∞ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏ 120120 —Ä—É–±–ª–µ–π –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_shipping_cost(quantity), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ quantity ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(get_shipping_cost(1))
print(get_shipping_cost(3))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

1000
1240 """

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_shipping_cost(quantity):
    res = 1000 + 120 * (quantity - 1)
    return res

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(get_shipping_cost(n))


""" –ë–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é compute_binom(n, k), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n –∏ k –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞, —Ä–∞–≤–Ω–æ–≥–æ \dfrac{n!}{k! (n-k)!} 
k!(n‚àík)!
n!
‚Äã
 .

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –§–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ nn, –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 11 –¥–æ nn, —Ç–æ –µ—Å—Ç—å 
n!=1\cdot2\cdot3\cdot‚Ä¶\cdot n
n!=1‚ãÖ2‚ãÖ3‚ãÖ‚Ä¶‚ãÖn

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é factorial(n), –≤—ã—á–∏—Å–ª—è—é—â—É—é —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —É–∂–µ –≥–æ—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∏–∑ –º–æ–¥—É–ª—è math. """
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def compute_binom(n, k):
    if k > n:
        return 0
    from math import factorial
    res = int(factorial(n) / (factorial(k) * factorial(n - k)))
    return res

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())
k = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(compute_binom(n, k))

""" –ß–∏—Å–ª–æ —Å–ª–æ–≤–∞–º–∏ üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é number_to_words(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ num –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–ª–æ–≤–µ—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ —á–∏—Å–ª–æ 1 \le num \le 991‚â§num ‚â§99.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(number_to_words(7))
print(number_to_words(85))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

—Å–µ–º—å
–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –ø—è—Ç—å """

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def number_to_words(num):
    num_1 = ['', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å',]
    num_10 = ['', '', '–¥–≤–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Å–æ—Ä–æ–∫', '–ø—è—Ç—å–¥–µ—Å—è—Ç', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ']
    if 1 <= num < 20:
        res = num_1[num]
    else:
        res = num_10[num // 10] + ' ' + num_1[num % 10]
    return res

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
for i in range(1, 100):
    print(number_to_words(i))

""" –ò—Å–∫–æ–º—ã–π –º–µ—Å—è—Ü
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_month(language, number), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ language ‚Äì —è–∑—ã–∫ ru –∏–ª–∏ en –∏ number ‚Äì –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (–æ—Ç 1 –¥–æ 12) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(get_month('ru', 1))
print(get_month('ru', 12))
print(get_month('en', 1))
print(get_month('en', 10))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

—è–Ω–≤–∞—Ä—å
–¥–µ–∫–∞–±—Ä—å
january
october """

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_month(language, number):
    lng_ru = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']

    lng_en = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']
    if language == 'en':
        return lng_en[number - 1]
    else:
        return lng_ru[number - 1]

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
lan = input()
num = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(get_month(lan, num))

""" –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã
–ú–∞–≥–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ ‚Äì —ç—Ç–æ –¥–∞—Ç–∞, –∫–æ–≥–¥–∞ –¥–µ–Ω—å, —É–º–Ω–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –º–µ—Å—è—Ü, —Ä–∞–≤–µ–Ω —á–∏—Å–ª—É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–≤—É–º—è —Ü–∏—Ñ—Ä–∞–º–∏ –≥–æ–¥–∞.

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, is_magic(date) –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–æ–π –¥–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ –¥–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–æ–π –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(is_magic('10.06.1960'))
print(is_magic('11.06.1960'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

True
False """

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_magic(date):
    list1 = [int(i) for i in date.split('.')]
    if list1[0] * list1[1] == list1[2] % 100:
        return True
    else:
        return False

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
date = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_magic(date))

""" –ü–∞–Ω–≥—Ä–∞–º–º—ã
–ü–∞–Ω–≥—Ä–∞–º–º–∞ ‚Äì —ç—Ç–æ —Ñ—Ä–∞–∑–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –≤ —Å–µ–±–µ –≤—Å–µ –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞. –û–±—ã—á–Ω–æ –ø–∞–Ω–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–æ–≤, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≥–ª–∏—Ñ—ã.

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, is_pangram(text) –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–∞–Ω–≥—Ä–∞–º–º–æ–π –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(is_pangram('Jackdaws love my big sphinx of quartz'))
print(is_pangram('The jay pig fox zebra and my wolves quack'))
print(is_pangram('Hello world'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

True
True
False """

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_pangram(text):
    for q in range(97, 123):
        if chr(q) not in text.lower():
            return False
    return True

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
text = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_pangram(text))